name: TMP Project Front-end CI/CD

permissions:
  id-token: write
  contents: write
  actions: read
  security-events: write
  statuses: write

on:
  # pull_request:
  #   branches:
  #     - main
  push:
    branches:
      - dev
    # types:
    #   - closed
    paths:
      - "front-end/**"

env:
  REGISTRY: "314146303416.dkr.ecr.eu-west-1.amazonaws.com"
  SERVICE: frontend
  ENVIRONMENT: "DEV"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_REGION: "eu-west-1"
  ENVIROMENT: "DEV"
  REPOSITORY: "tmp-project"
  AWS_GITHUB_ACTION_ROLE: ${{ secrets.AWS_GITHUB_ACTION_ROLE }}
  PROJECT_DIR: "/home/ec2/tmp-project"
  # SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_DEV }}

jobs:
  CI:
    # if: github.event.pull_request.merged == true

    outputs:
      version: ${{ steps.version.outputs.version }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}-${{ env.ENVIRONMENT }}-${increment}"
          bump_each_commit: false
          bump_each_commit_patch_pattern: ""
          search_commit_body: false
          user_format_type: "csv"

      - name: Build and Package
        env:
          TAG: ${{ steps.version.outputs.version }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ env.TAG }} --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} .
        working-directory: front-end

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_GITHUB_ACTION_ROLE }}
          role-session-name: tmp-project-${{ env.ENVIRONMENT }}-${{ env.SERVICE }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Publish
        env:
          TAG: ${{ steps.version.outputs.version }}
        run: |
          echo "Pushing the Docker image to ECR..."
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ env.TAG }}

  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_GITHUB_ACTION_ROLE }}
          role-session-name: tmp-project-${{ env.ENVIRONMENT }}-${{ env.SERVICE }}

      - name: Execute Deployment Script via SSM
        id: execute_command
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.TMP_PROJECT_HOST }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd ${{ env.PROJECT_DIR }}",
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}",
              "docker-compose pull ${{ env.SERVICE }}",
              "docker-compose up --no-deps -d ${{ env.SERVICE }}"
            ]' \
            --comment "Deploying application via GitHub Actions" \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID: $COMMAND_ID"
          echo "command_id=$COMMAND_ID" >> $GITHUB_ENV

      - name: Wait for Command Completion
        run: sleep 15s

      - name: Retrieve Command Output
        run: |
          aws ssm list-command-invocations \
            --command-id "${{ env.command_id }}" \
            --details \
            --query "CommandInvocations[].CommandPlugins[].{Status:Status,Output:Output}" \
            --output text

      # - name: Deploy
      #   uses: GeorgeEliWilliams/ssm-send-command-action@v1
      #   with:
      #     instanceName: ${{ secrets.TMP_PROJECT_HOST }}
      #     workingDirectory: /home/ec2/tmp-project
      #     commands: |
      #       aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 314146303416.dkr.ecr.eu-west-1.amazonaws.com
      #       docker compose pull ${{ env.SERVICE }}
      #       docker compose up --no-deps -d ${{ env.SERVICE }}

      

  # Report:
  #   runs-on: ubuntu-latest
  #   needs: [CI, CD]
  #   if: ${{ always() }}
  #   steps:
  #     - uses: technote-space/workflow-conclusion-action@v3
  #     - name: Slack Notification
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: ${{ env.WORKFLOW_CONCLUSION }}
  #         fields: repo,message,commit,author,action,eventName,ref,workflow

  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
