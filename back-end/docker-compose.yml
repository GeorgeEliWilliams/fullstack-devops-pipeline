version: "3.8"

services:
  # Laravel Application Service (PHP-FPM)
  app:
    build:
      context: .   # Uses the current directory as the build context
      dockerfile: Dockerfile  # Specifies the Laravel Dockerfile
    container_name: ${APP_NAME}_app
    restart: unless-stopped  # Ensures the container restarts unless manually stopped
    working_dir: /var/www  # Sets the working directory inside the container
    volumes:
      - .:/var/www  # Mounts the local project directory to the container
    environment:
      # Loads Laravel environment variables from the .env file
      APP_ENV: ${APP_ENV}
      APP_DEBUG: ${APP_DEBUG}
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: mysql
      DB_HOST: database
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - database  # Ensures the database container starts before the Laravel app
      - redis  # Ensures the Redis cache service is available before Laravel starts
    networks:
      - laravel_network  # Connects the app to a dedicated Docker network

  # MySQL Database Service
  database:
    image: mysql:8.0  # Uses the latest MySQL 8.0 image
    container_name: ${APP_NAME}_mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}  # Uses database name from .env file
      MYSQL_USER: ${DB_USERNAME}  # Uses database user from .env file
      MYSQL_PASSWORD: ${DB_PASSWORD}  # Uses database password from .env file
      MYSQL_ROOT_PASSWORD: root  # Root password for administrative access
    ports:
      - "3306:3306"  # Maps MySQL port to host machine
    volumes:
      - mysql_data:/var/lib/mysql  # Persists MySQL data to a Docker volume
    networks:
      - laravel_network  # Connects the database to the Laravel app network

  # Redis Service (for caching and queue management)
  redis:
    image: redis:latest  # Uses the latest Redis image
    container_name: ${APP_NAME}_redis
    restart: unless-stopped
    ports:
      - "6379:6379"  # Exposes Redis on its default port
    networks:
      - laravel_network  # Connects Redis to the Laravel app network

  # Nginx Web Server (Reverse Proxy)
  nginx:
    image: nginx:alpine  # Uses a lightweight Nginx image
    container_name: ${APP_NAME}_nginx
    restart: unless-stopped
    ports:
      - "80:80"  # Maps port 80 from container to host (HTTP traffic)
    volumes:
      - .:/var/www  # Mounts the Laravel application directory
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Loads custom Nginx config
    depends_on:
      - app  # Ensures Laravel app starts before Nginx
    networks:
      - laravel_network  # Connects Nginx to the Laravel app network

  # MailTrap Service (For testing outgoing emails)
  mailtrap:
    image: mailhog/mailhog  # Uses MailHog for local email testing
    container_name: ${APP_NAME}_mailtrap
    restart: unless-stopped
    ports:
      - "2525:2525"  # SMTP port for sending emails
      - "8025:8025"  # Web interface to view test emails
    networks:
      - laravel_network  # Connects MailTrap to the Laravel app network

# Define a custom network for inter-service communication
networks:
  laravel_network:

# Define persistent storage volumes for MySQL
volumes:
  mysql_data:
